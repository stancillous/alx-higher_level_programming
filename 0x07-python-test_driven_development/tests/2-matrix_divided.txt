``2-matrix_divided`` module test

Using ``matrix_divided`` function

test cases for the function ``matrix_divided``.
The function should divide all elements of a matrix.
import function like this:
    
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

How to use it:

to verify type of matrix

    >>> matrix = [[1, 2, 3], [1.3, 3.5, "HOLA"], ["SI", 3, 2.4]]
    >>> print(matrix_divided(matrix, 1))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

verify len of each row of the matrix

    >>> matrix = [[1, 2, 3], [3.4, 4.5, 6], [1.2, 3, 7, 7]]
    >>> print(matrix_divided(matrix, 1))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

div must be int or float

    >>> matrix = [[1, 2, 3], [3.4, 4.5, 6], [1.2, 3, 7]]
    >>> print(matrix_divided(matrix, "3"))
    Traceback (most recent call last):
    TypeError: div must be a number

if div is 0

    >>> matrix = [[1, 2, 3], [3.4, 4.5, 6], [1.2, 3, 7]]
    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

matrix elements should be .2f

    >>> matrix = [[1, 2, 3], [4, 6, 7], [9, 13, 70]]
    >>> print(matrix_divided(matrix, 2))
    [[0.5, 1.0, 1.5], [2.0, 3.0, 3.5], [4.5, 6.5, 35.0]]

if list not given as argument

    >>> matrix = {1: 34, 2: 23}
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

argument is None

    >>> matrix = None
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

if divisor argument is None

    >>> matrix = [[1, 2, 3], [4, 6, 7], [9, 13, 70]]
    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

matrix list have a None value

    >>> matrix = [[1, 2, None], [4, 6, 7], [9, 13, 70]]
    >>> print(matrix_divided(matrix, 2))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

div as sqrt(-1)

    >>> matrix = [[1, 2, 3], [4, 6, 7], [9, 13, 70]]
    >>> print(matrix_divided(matrix, 3j))
    Traceback (most recent call last):
    TypeError: div must be a number

matrix with lists and other elements inside

    >>> matrix = [(1, 2), [4, 5]]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

empty matrix

    >>> matrix = [[], []]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

empty element in matrix

    >>> matrix = [[2, 3,4, 5], []]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

matrix is 3d

    >>> matrix = [[[3, 3, 4], [2, 1]], [2, 3]]
    >>> matrix_divided(matrix, 2)
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

